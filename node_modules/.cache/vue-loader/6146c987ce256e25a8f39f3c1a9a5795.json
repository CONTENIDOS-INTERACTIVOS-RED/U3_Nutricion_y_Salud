{"remainingRequest":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/src/views/curso/Tema2.vue?vue&type=template&id=ab9f3b9a&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/src/views/curso/Tema2.vue","mtime":1751581231165},{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Nutricion_y_Salud/U3_Nutricion_y_Salud/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gQXByb3ZlY2hhbWllbnRvIGRlbCBtZWRpbzogY29zZWNoYXMsIGFsaW1lbnRvcyBsb2NhbGVzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKCiAgICAuYmctY29sb3ItOC5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikKICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgIC5jb2wtbGcKICAgICAgICAgIC5wLTQKICAgICAgICAgICAgcC5tYi0wKGRhdGEtYW9zPSJmYWRlLXVwIikgUGFydGUgZGUgbG9zIHByb2JsZW1hcyBkZSBsYSBudXRyaWNpw7NuLCBlc3TDoW4gYXNvY2lhZG9zIGFsIGFjY2VzbyB5IGRpc3BvbmliaWxpZGFkIGRlIGxvcyBhbGltZW50b3MgZW4gZWwgZW50b3JubyAoYmFycmlvLCBtdW5pY2lwaW8sIGxvY2FsaWRhZCkgeSBxdWUgbGFzIGNvbmRpY2lvbmVzIGFtYmllbnRhbGVzLCBsYXMgb3BvcnR1bmlkYWRlcyBkZWwgc3VlbG8geSBsYXMgZ2FyYW50w61hcyBhZ3LDrWNvbGFzIHNvbiBjbGF2ZXMgcGFyYSBsb2dyYXIgbGEgc2VndXJpZGFkIGFsaW1lbnRhcmlhLCBkZSBsYSBtYW5vIGNvbiBsYXMgY29uZGljaW9uZXMgZGUgdHJhbnNwb3J0ZSBkZSBsb3MgYWxpbWVudG9zIHkgbGEgc2l0dWFjacOzbiBwb2zDrXRpY2EgeSBlY29uw7NtaWNhIGRlbCB0ZXJyaXRvcmlvLgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzEucG5nJywgYWx0PScnKQoKCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4xXSBBZ3JpY3VsdHVyYSBsb2NhbCB5IGZhbWlsaWFyCgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItNS5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBVbmEgZXN0cmF0ZWdpYSBlZmVjdGl2YSB5IHNvc3RlbmlibGUgcGFyYSByZWR1Y2lyIGxhIG1hbG51dHJpY2nDs24gaW5mYW50aWwgZXMgZWwgYXByb3ZlY2hhbWllbnRvIGRlIGxhcyBjb3NlY2hhcyB5IGFsaW1lbnRvcyBsb2NhbGVzIGEgcGFydGlyIGRlIGxhIHByb21vY2nDs24gZGUgbGEgYWdyaWN1bHR1cmEgbG9jYWwgeSBmYW1pbGlhciBmb21lbnRhbmRvIGxvcyBtZWNhbmlzbW9zIGZpbmFuY2llcm9zIHkgdGVjbm9sw7NnaWNvcyBwYXJhIHF1ZSBzZSBsb2dyZSBsYSBzb3N0ZW5pYmlsaWRhZC4KCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTG9zIG1lcmNhZG9zIGNhbXBlc2lub3MgeSBjb211bml0YXJpb3Mgc29uIG1vZGVsb3MgZGUgY29tZXJjaWFsaXphY2nDs24gZGUgYmllbmVzIHkgc2VydmljaW9zIGFncm9wZWN1YXJpb3MgYSBuaXZlbCBsb2NhbCBxdWUgc2UgY2FyYWN0ZXJpemFuIHBvcjogCgoKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUKICAgICAgLnB4LTQucHgtbGctNS5wdC01LnB0LWxnLTAKCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgoKICAgICAgICAgIC5jb2wtbGctNihkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgdWwubGlzdGEtdWwKICAgICAgICAgICAgICBsaS5tdC00CiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgIHwgTGEgcHJlc2VuY2lhIHkgZ2VzdGnDs24gcG9yIHBhcnRlIGRlIHByb2R1Y3RvcmVzIHkgb3JnYW5pemFjaW9uZXMgZGUgYWdyaWN1bHR1cmEgY2FtcGVzaW5hLCBmYW1pbGlhciB5IGNvbXVuaXRhcmlhLgogICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgfCBBdXNlbmNpYSBvIG3DrW5pbWEgaW50ZXJtZWRpYWNpw7NuLgogICAgICAgICAgICAgIGxpLm1iLTEKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWNoZWNrLWNpcmNsZQogICAgICAgICAgICAgICAgfCBWZW50YSBkZSBwcm9kdWN0b3MgZnJlc2NvcyB5IGRlIHRlbXBvcmFkYS4KICAgICAgICAgICAgICBsaS5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgIHwgUHJvbW9jacOzbiBkZSBhbGltZW50b3MgeSBwcm9kdWN0b3MgcHJvcGlvcyBkZWwgdGVycml0b3Jpby4KICAgICAgICAgICAgICBsaS5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgIHwgQsO6c3F1ZWRhIGRlIHVuIHByZWNpbyBqdXN0byB0YW50byBwYXJhIGVsIHByb2R1Y3RvciBjb21vIHBhcmEgZWwgY29uc3VtaWRvci4KICAgICAgICAgICAgICBsaS5tYi0xCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1jaGVjay1jaXJjbGUKICAgICAgICAgICAgICAgIHwgRm9tZW50byBkZSBsYSBhZ3JpY3VsdHVyYSBsaW1waWEgbyBhZ3JvZWNvbMOzZ2ljYS4gCgogICAgICAgICAgLmNvbC1sZy00KGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgaW1nLmltZy1mbHVpZChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDo1MDVweCIsIGFsdD0iIikubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubXQtNC5tdC1sZy0wCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRW4gQ29sb21iaWEgc2UgY29zZWNoYSB1bmEgZ3JhbiB2YXJpZWRhZCBkZSBwcm9kdWN0b3MgYWxpbWVudGljaW9zLCBkZW50cm8gZGUgbG9zIHF1ZSBzZSBkZXN0YWNhbjogCgogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tMi5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMwogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzUucG5nJywgYWx0PScnKQogICAgICAgICAgLmNvbC1sZy04CgogICAgICAgICAgICBTbHlkZXJGKGNvbHVtbmFzPSJjb2wtMTIgY29sLWxnLTYiKQogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5zdmcnIGFsdD0nQXZhdGFyVG9wJyAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIHAudGV4dC1jZW50ZXIgRnJ1dGFzIGNvbW8gbWFuZ28sIHBlcmEsIHRhbmdlbG8sIHBhdGlsbGEsIG1hbnphbmEsIGd1YW7DoWJhbmEsIGR1cmF6bm8sIGJhbmFubywgcGFwYXlhLCBjdXJ1YmEsIG1hcmFjdXnDoSB5IHRvbWF0ZSBkZSDDoXJib2wuCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi83LnN2ZycgYWx0PSdBdmF0YXJUb3AnICwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8ubWItMwogICAgICAgICAgICAgICAgcC50ZXh0LWNlbnRlciBUdWLDqXJjdWxvcywgcmHDrWNlcyB5IHBsw6F0YW5vcyBjb21vIMOxYW1lLCBwbMOhdGFubyB5IHl1Y2EuCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi84LnN2ZycgYWx0PSdBdmF0YXJUb3AnICwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8ubWItMwogICAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIubWItNCBQYWxtYSBkZSBhY2VpdGUKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUucC00LmgtMTAwLnNoYWRvdy1hcHAKICAgICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnJyBhbHQ9J0F2YXRhclRvcCcgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IEFycm96CiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMC5zdmcnIGFsdD0nQXZhdGFyVG9wJyAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgQ2HDsWEgZGUgYXrDumNhcgogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5wLTQuaC0xMDAuc2hhZG93LWFwcAogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMTEuc3ZnJyBhbHQ9J0F2YXRhclRvcCcgLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0by5tYi0zCiAgICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlci5tYi00IENhY2FvCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLnAtNC5oLTEwMC5zaGFkb3ctYXBwCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMi5zdmcnIGFsdD0nQXZhdGFyVG9wJyAsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvLm1iLTMKICAgICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyLm1iLTQgSG9ydGFsaXphcwoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTgubWItNAogICAgICAucHgtNC5weC1sZy01LnB5LTQKICAgICAgICBwLm1iLTAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVsIHBhw61zIGVzIHVuIGltcG9ydGFudGUgcHJvZHVjdG9yIGRlIGZydXRhcyB5IGZydXRhcyBleMOzdGljYXMuIEVuIGVsIGHDsW8gMjAyMSwgbGEgcHJvZHVjY2nDs24gbmFjaW9uYWwgZGUgZnJ1dGFzIGZyZXNjYXMgYWxjYW56w7MgbG9zIDEyLDQgbWlsbG9uZXMgZGUgdG9uZWxhZGFzLiBFbiBjdWFudG8gYSBsYXMgaG9ydGFsaXphcywgQW50aW9xdWlhLCBCb3lhY8OhIHkgQ3VuZGluYW1hcmNhLCBzb24gbGFzIHJlZ2lvbmVzIHF1ZSBjb25jZW50cmFuIGVsIDU4ICUgZGVsIHZvbHVtZW4gcHJvZHVjaWRvLiAKCgoKICAgIC5yb3cubWItNAogICAgICAuY29sLWxnLTUKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEzLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tdC1sZy0wCiAgICAgIC5jb2wtbGctNwogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBQb3Igb3RybyBsYWRvLCBleHBlcnRvcyBlbiBudXRyaWNpw7NuIHkgYWxpbWVudGFjacOzbiBwbGFudGVhbiBsYSBpbXBvcnRhbmNpYSBkZSB0b21hciBlbiBjdWVudGEgbGEgcmVnacOzbiBlbiBxdWUgZWwgYWxpbWVudG8gc2UgcHJvZHVjZSwgY3VhbmRvIHNlIGluZm9ybWEgc29icmUgbGEgY29tcG9zaWNpw7NuIHF1w61taWNhIGRlIGxvcyBhbGltZW50b3MuIEVzdGUgdGVtYSBoYSBhZHF1aXJpZG8gcmVsZXZhbmNpYSwgZXNwZWNpYWxtZW50ZSBjdWFuZG8gc2UgdHJhdGEgZGUgbGEgY29tcG9zaWNpw7NuIGRlIG1pY3JvbWluZXJhbGVzIGVuIHVuIGFsaW1lbnRvLCBwdWVzIGxhIGNvbmNlbnRyYWNpw7NuIGRlIGVzdG9zIG51dHJpZW50ZXMgZGVwZW5kZSBlbiBncmFuIHBhcnRlIGRlIGxhIGNvbmNlbnRyYWNpw7NuIGRlIG1pY3JvIG1pbmVyYWxlcyBkZWwgc3VlbG8gZW4gcXVlIHNlIGhhIGN1bHRpdmFkbyBvIHByb2R1Y2lkbyBlbCBhbGltZW50by4gCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGxvcyBjdWx0aXZvcywgZGUgYWN1ZXJkbyBjb24gZWwgdGlwbyBkZSB0aWVycmFzIGVuIENvbG9tYmlhOgoKICAgIC5iZy1jb2xvci1pbmZvLm1iLTUucC01CiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAuY29sLWxnLTEwCiAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogMTAzMHB4IikubXgtYXV0by5tYi0zCgogICAgLnRpdHVsby1maWd1cmEubWItNAogICAgICBoNSBGaWd1cmEgMS4gCiAgICAgIHNwYW4gUHJvZHVjdG9zIHF1ZSBzZSBjb3NlY2hhbiBlbiBlbCBwYcOtcyBwb3IgdG9kbyBlbCBhw7FvIHksIHNlZ8O6biBlbCBjbGltYS4KCiAgICBmaWd1cmUubWItMwogICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9maWd1cmExLnBuZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDEyNDBweCIpLm14LWF1dG8ubWItMwoKICAgIC5iZy1jb2xvci1pbmZvLm1iLTUucC00CiAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTAgI1tiIE5vdGEuXSBUb21hZG8geSBhZGFwdGFkbyBkZSAjW2EoaHJlZj0iaHR0cHM6Ly93d3cuYWdyb25lZ29jaW9zLmNvL2FncmljdWx0dXJhL2N1YWxlcy1zb24tbGFzLW1lam9yZXMtY29uZGljaW9uZXMtcGFyYS1sYS10ZW1wb3JhZGEtZGUtc2llbWJyYXMtZW4tY29sb21iaWEtMzEyNjEzNSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIGh0dHBzOi8vd3d3LmFncm9uZWdvY2lvcy5jby9hZ3JpY3VsdHVyYS9jdWFsZXMtc29uLWxhcy1tZWpvcmVzLWNvbmRpY2lvbmVzLXBhcmEtbGEtdGVtcG9yYWRhLWRlLXNpZW1icmFzLWVuLWNvbG9tYmlhLTMxMjYxMzVdCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgUGFyYSBhc2VndXJhciBlbCBzdW1pbmlzdHJvIGNvbnN0YW50ZSBkZSBhbGltZW50b3MgZnJlc2NvcyB5IG51dHJpdGl2b3MgYSBwYXJ0aXIgZGUgbGEgYWdyaWN1bHR1cmEgbG9jYWwgeSBmYW1pbGlhciwgZXMgcG9zaWJsZSBwcm9tb3ZlciBlc3RyYXRlZ2lhcyBjb21vOgoKICAgIC50aXR1bG8tZmlndXJhLm1iLTQKICAgICAgaDUgVGFibGEgMS4gCiAgICAgIHNwYW4gQWxndW5hcyBhY2Npb25lcyB5IGVzdHJhdGVnaWFzIGxvY2FsZXMgY29uIGltcGFjdG8gZW4gbGEgbnV0cmljacOzbiB5IGFsaW1lbnRhY2nDs24gaW5mYW50aWwKCiAgICAudGFibGEtYS5tYi01CiAgICAgIHRhYmxlCiAgICAgICAgdGhlYWQKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRoIEFjY2nDs24gbyBlc3RyYXRlZ2lhCiAgICAgICAgICAgIHRoIFBvc2libGVzIGFsaWFkb3MKICAgICAgICB0Ym9keQogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRm9tZW50YXIgbGEgY29uc3RydWNjacOzbiB5IG1hbnRlbmltaWVudG8gZGUgaHVlcnRhcyBlc2NvbGFyZXMgeSBjb211bml0YXJpYXMuCiAgICAgICAgICAgIHRkIEZhbWlsaWFzLCBjb211bmlkYWRlcywgYXNvY2lhdGl2aWRhZGVzLCBsw61kZXJlcyBiYXJyaWFsZXMgbyBjb211bml0YXJpb3MgKEp1bnRhcyBkZSBBY2Npw7NuIENvbXVuYWwgeSBMb2NhbCkKICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEJyaW5kYXIgY2FwYWNpdGFjaW9uZXMgZW4gdGVjbm9sb2fDrWFzIGFwbGljYWRhcyBhbCBhZ3JvLCBxdWUgc2VhbiBmw6FjaWxlcywgw6FnaWxlcyB5IGVjb27Ds21pY2FzCiAgICAgICAgICAgIHRkIEluc3RpdHVjaW9uZXMgZGUgZWR1Y2FjacOzbiBzdXBlcmlvciwgZW1wcmVzYXJpb3MsIFNlcnZpY2lvIGRlIEFwcmVuZGl6YWplIFNFTkEuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBEaXZlcnNpZmljYXIgYWxpbWVudG9zIGxvY2FsZXMgYSBwYXJ0aXIgZGVsIGNvbnN1bW8gZGUgZGl2ZXJzb3MgdGlwb3MgZGUgYWxpbWVudG9zIHksIHNlZ8O6biBsYSBjb3NlY2hhLgogICAgICAgICAgICB0ZCBHb2JpZXJubyBsb2NhbCwgZW50aWRhZCBhIGNhcmdvIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgZGVsIHRlcnJpdG9yaW8sIHNlY3JldGFyw61hcyBkZSBhbWJpZW50ZSB5IGRlIGRlc2Fycm9sbG8gZWNvbsOzbWljby4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIFByb21vdmVyIGxhIHNpZW1icmEgZGUgYWxpbWVudG9zIGxvY2FsZXMsIHJpY29zIGVuIG51dHJpZW50ZXMsIGluY2x1c28gYWxpbWVudG9zIG5hdGl2b3MuIEluY29ycG9yYXIgdW5hIHZhcmllZGFkIGRlIGFsaW1lbnRvcyBsb2NhbGVzIGVuIGxhIGRpZXRhIGRpYXJpYSBwdWVkZSBtZWpvcmFyIGxhIG51dHJpY2nDs24gaW5mYW50aWwuCiAgICAgICAgICAgIHRkIEZhbWlsaWFzLCBjb211bmlkYWRlcywgYXNvY2lhdGl2aWRhZGVzLCBsw61kZXJlcyBiYXJyaWFsZXMgbyBjb211bml0YXJpb3MgKEp1bnRhcyBkZSBBY2Npw7NuIENvbXVuYWwgeSBMb2NhbCkuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBSZXNjYXRhciB5IHByb21vdmVyIHJlY2V0YXMgdHJhZGljaW9uYWxlcyBxdWUgdXRpbGl6YW4gaW5ncmVkaWVudGVzIGxvY2FsZXMgbnV0cml0aXZvcy4KICAgICAgICAgICAgdGQgRmFtaWxpYXMsIGNvbXVuaWRhZGVzLCBhc29jaWF0aXZpZGFkZXMsIGzDrWRlcmVzIGJhcnJpYWxlcyBvIGNvbXVuaXRhcmlvcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEVkdWNhciBhIGxhcyBmYW1pbGlhcyBzb2JyZSBsYSBpbXBvcnRhbmNpYSBkZSB1bmEgZGlldGEgYmFsYW5jZWFkYSB5IGPDs21vIGFwcm92ZWNoYXIgbG9zIGFsaW1lbnRvcyBsb2NhbGVzLgogICAgICAgICAgICB0ZCBFbnRpZGFkZXMgZGVsIHNpc3RlbWEgZGUgc2FsdWQgeSBlc3RhYmxlY2ltaWVudG9zIGVkdWNhdGl2b3MuCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBPcmdhbml6YXIgdGFsbGVyZXMgc29icmUgbnV0cmljacOzbiB5IHByZXBhcmFjacOzbiBkZSBhbGltZW50b3Mgc2FsdWRhYmxlcy4KICAgICAgICAgICAgdGQgRW50aWRhZGVzIGRlbCBzaXN0ZW1hIGRlIHNhbHVkIHkgZXN0YWJsZWNpbWllbnRvcyBlZHVjYXRpdm9zLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRGlzdHJpYnVpciBmb2xsZXRvcyB5IGd1w61hcyBjb24gaW5mb3JtYWNpw7NuIHNvYnJlIGxvcyBiZW5lZmljaW9zIGRlIGxvcyBhbGltZW50b3MgbG9jYWxlcyB5IGPDs21vIGluY29ycG9yYXJsb3MgZW4gbGEgZGlldGEuCiAgICAgICAgICAgIHRkIEVudGlkYWRlcyBkZWwgc2lzdGVtYSBkZSBzYWx1ZCB5IGVzdGFibGVjaW1pZW50b3MgZWR1Y2F0aXZvcy4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIEFzZWd1cmFyIHF1ZSBsYXMgY29tdW5pZGFkZXMgdGVuZ2FuIGFjY2VzbyBjb25zdGFudGUgYSBhbGltZW50b3MgbnV0cml0aXZvcy4KICAgICAgICAgICAgdGQgR29iaWVybm8gbG9jYWwsIGVudGlkYWQgYSBjYXJnbyBkZSBsb3MgcmVjdXJzb3MgbmF0dXJhbGVzIGRlbCB0ZXJyaXRvcmlvLCBzZWNyZXRhcsOtYXMgZGUgYW1iaWVudGUgeSBkZSBkZXNhcnJvbGxvIGVjb27Ds21pY28uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBDcmVhciBiYW5jb3MgZGUgYWxpbWVudG9zIHF1ZSBhbG1hY2VuZW4geSBkaXN0cmlidXlhbiBwcm9kdWN0b3MgbG9jYWxlcyBlbiB0aWVtcG9zIGRlIGVzY2FzZXouCiAgICAgICAgICAgIHRkIEZ1bmRhY2lvbmVzLCBlbnRpZGFkZXMgZWNsZXNpw6FzdGljYXMgeSBzZWN0b3IgZW1wcmVzYXJpYWwsIEdvYmllcm5vIGxvY2FsLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRXN0YWJsZWNlciByZWRlcyBkZSBjb21lcmNpbyBxdWUgZmFjaWxpdGVuIGVsIGludGVyY2FtYmlvIGRlIHByb2R1Y3RvcyBlbnRyZSBjb211bmlkYWRlcy4KICAgICAgICAgICAgdGQgR29iaWVybm8gbG9jYWwsIGVudGlkYWQgYSBjYXJnbyBkZSBsb3MgcmVjdXJzb3MgbmF0dXJhbGVzIGRlbCB0ZXJyaXRvcmlvLCBzZWNyZXRhcsOtYXMgZGUgYW1iaWVudGUgeSBkZSBkZXNhcnJvbGxvIGVjb27Ds21pY28uCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBJbXBsZW1lbnRhciBwb2zDrXRpY2FzIHF1ZSBhcG95ZW4gbGEgcHJvZHVjY2nDs24geSBlbCBjb25zdW1vIGRlIGFsaW1lbnRvcyBsb2NhbGVzLgogICAgICAgICAgICB0ZCBHb2JpZXJubyBsb2NhbCwgZW50aWRhZCBhIGNhcmdvIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgZGVsIHRlcnJpdG9yaW8sIHNlY3JldGFyw61hcyBkZSBhbWJpZW50ZSB5IGRlIGRlc2Fycm9sbG8gZWNvbsOzbWljby4KICAgICAgICAgIHRyCiAgICAgICAgICAgIHRkIE9mcmVjZXIgc3Vic2lkaW9zIGEgcGVxdWXDsW9zIGFncmljdWx0b3JlcyB5IHByb2R1Y3RvcmVzIGxvY2FsZXMuCiAgICAgICAgICAgIHRkIEdvYmllcm5vIGxvY2FsLCBlbnRpZGFkIGEgY2FyZ28gZGUgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcyBkZWwgdGVycml0b3Jpbywgc2VjcmV0YXLDrWFzIGRlIGFtYmllbnRlIHkgZGUgZGVzYXJyb2xsbyBlY29uw7NtaWNvLgogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgQ3JlYXIgcmVndWxhY2lvbmVzIHF1ZSBmYXZvcmV6Y2FuIGxhIHByb2R1Y2Npw7NuIHNvc3RlbmlibGUgeSBsYSBjb21lcmNpYWxpemFjacOzbiBkZSBhbGltZW50b3MgbG9jYWxlcy4KICAgICAgICAgICAgdGQgR29iaWVybm8gbG9jYWwsIGVudGlkYWQgYSBjYXJnbyBkZSBsb3MgcmVjdXJzb3MgbmF0dXJhbGVzIGRlbCB0ZXJyaXRvcmlvLCBzZWNyZXRhcsOtYXMgZGUgYW1iaWVudGUgeSBkZSBkZXNhcnJvbGxvIGVjb27Ds21pY28uCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBFc3RhcyBlc3RyYXRlZ2lhcyBheXVkYW4gYSBtaXRpZ2FyIGxhIG1hbG51dHJpY2nDs24gaW5mYW50aWwgKGZhbWlsaWFyIHkgY29tdW5pdGFyaWEpLCB0YW1iacOpbiBmb3J0YWxlY2VuIGxhIGVjb25vbcOtYSBsb2NhbCwgZGluYW1pemFuIGxhIHNvc3RlbmliaWxpZGFkIGFtYmllbnRhbCB5IHN1bWEgYSBsYSBzb2JlcmFuw61hIGFsaW1lbnRhcmlhLgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQuZC1ub25lLmQtc20tYmxvY2sKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTAgTG9zIFByb2dyYW1hcyBkZSBhbGltZW50YWNpw7NuIGVzY29sYXIgaGFjZW4gcGFydGUgZGUgbGFzIHBvbMOtdGljYXMgeSBwcm9ncmFtYXMgZGUgbG9zIHBhw61zZXMgZW4gbGFzIGVzY2FsYXMgcmVnaW9uYWxlcyB5IGxvY2FsZXMuIEFsIHJlc3BlY3RvLCBoYXkgZXhwZXJpZW5jaWFzIHF1ZSBwcm9tdWV2ZW4gY2FtYmlvcyBkZXNkZSBsYSBwcm9kdWNjacOzbiB5IGVsIGNvbnN1bW8sIGVsIGFjY2VzbyB5IGxhIGFsaW1lbnRhY2nDs24gbnV0cml0aXZhIHBhcmEgZXN0YXMgZXRhcGFzIGRlIGxvcyBlc2NvbGFyZXMuIAoKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEFsIHJlc3BlY3RvLCBlbiBlbCBzaWd1aWVudGUgZW5sYWNlIHNlIHZpc3VhbGl6YSBwYXJ0ZSBkZWwgY3Vyc28gIkxhIGFsaW1lbnRhY2nDs24gZXNjb2xhciBjb21vIGVzdHJhdGVnaWEgZWR1Y2F0aXZhIHBhcmEgdW5hIHZpZGEgc2FsdWRhYmxlIiwgcXVlIGFib3JkYSBsYXMgaW5ub3ZhY2lvbmVzIGVuIGxvcyBwcm9ncmFtYXMgZGUgYWxpbWVudGFjacOzbiBlc2NvbGFyIGNvbW8gcG9sw610aWNhIGVzdHJhdMOpZ2ljYSBkZSBzZWd1cmlkYWQgYWxpbWVudGFyaWEgeSBudXRyaWNpb25hbDsgcHJlc2VudGEgZWwgUHJvZ3JhbWEgTmFjaW9uYWwgZGUgQWxpbWVudGFjacOzbiBFc2NvbGFyIGRlIEJyYXNpbCAoUE5BRSkuCgogICAgICAgIC5iZy1jb2xvci13aGl0ZS5zaGFkb3ctc29mdC5wLTQubWItNAogICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtYXJvdW5kLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS92aWRlby5zdmciLCBzdHlsZT0id2lkdGg6IDgwcHg7IikubXgtYXV0by5tYi00Lm1iLWxnLTAKICAgICAgICAgICAgLmNvbAogICAgICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWJldHdlZW4uYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLm1iLTMubWItc20tMAogICAgICAgICAgICAgICAgICBoNS5tYi0xIElOTk9WQUNJT05FUyBFTiBMT1MgUFJPR1JBTUFTIERFIEFMSU1FTlRBQ0nDk04gCiAgICAgICAgICAgICAgICAgIHAubWItMCBBbnRlcyBkZSBhYm9yZGFyIElubm92YWNpb25lcyBlbiBsb3MgcHJvZ3JhbWFzIGRlIGFsaW1lbnRhY2nDs24sIGxvIGludml0YW1vcyBhIHZlciBlbCBzaWd1aWVudGUgY3VlbnRvLgogICAgICAgICAgICAgICAgLmNvbC1zbS1hdXRvCiAgICAgICAgICAgICAgICAgIGEuYm90b24uY29sb3ItYWNlbnRvLWJvdG9uZXMoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1xN25IalN1Vm9odyIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgICAgICAgICAgIHNwYW4gVmVyIHZpZGVvCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctcmlnaHQKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLnAtNC5weC01CiAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgIC5jb2wtbGcKICAgICAgICAgIHAubWItMCBTZWfDum4gbGEgRXN0cmF0ZWdpYSBkZSBEZXNhcnJvbGxvIFJ1cmFsIEludGVncmFsIGNvbiBFbmZvcXVlIFRlcnJpdG9yaWFsIGVuIENvbG9tYmlhLCBsYSBlY29ub23DrWEgY2FtcGVzaW5hLCBmYW1pbGlhciB5IGNvbXVuaXRhcmlhLCBlcyBlbCBzaXN0ZW1hIGRlIHByb2R1Y2Npw7NuLCB0cmFuc2Zvcm1hY2nDs24sIGRpc3RyaWJ1Y2nDs24sIGNvbWVyY2lhbGl6YWNpw7NuIHkgY29uc3VtbyBkZSBiaWVuZXMgeSBzZXJ2aWNpb3M7IG9yZ2FuaXphZG8geSBnZXN0aW9uYWRvIHBvciBob21icmVzLCBtdWplcmVzLCBmYW1pbGlhcywgeSBjb211bmlkYWRlcyBjYW1wZXNpbmFzLCBpbmTDrWdlbmFzLCBuZWdyYXMsIGFmcm9kZXNjZW5kaWVudGVzLCByYWl6YWxlcyB5IHBhbGVucXVlcmFzLCBxdWUgY29udml2ZW4gZW4gbG9zIHRlcnJpdG9yaW9zIHJ1cmFsZXMgZGVsIHBhw61zLgoKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LmFncm9uZWdvY2lvcy5jby9hZ3JpY3VsdHVyYS9jdWFsZXMtc29uLWxhcy1tZWpvcmVzLWNvbmRpY2lvbmVzLXBhcmEtbGEtdGVtcG9yYWRhLWRlLXNpZW1icmFzLWVuLWNvbG9tYmlhLTMxMjYxMzUiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNT05URVMsIFMuICgyMDIxKSDCv0N1w6FsZXMgc29uIGxhcyBtZWpvcmVzIGNvbmRpY2lvbmVzIHBhcmEgbGEgdGVtcG9yYWRhIGRlIHNpZW1icmFzIGVuIENvbG9tYmlhPyBBR1JPTkVHT0NJT1MuIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9eHNlYkFqVG1NMW8mdD0yNTMzcyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIElNUSBQcmV2ZW50aW9uICgyMDIxLCAyNiBtYXlvKS4gV2ViaW5hciAnTnV0cmljaW/MgW46IENsYXZlIHBhcmEgY29uc2VndWlyIHVuIGVudG9ybm8gc2FsdWRhYmxlJy4KCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCg=="},null]}